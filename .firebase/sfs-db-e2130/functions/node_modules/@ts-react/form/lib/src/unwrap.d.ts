import { ZodArray, ZodEnum, ZodNullable, ZodOptional } from "zod";
import { HIDDEN_ID_PROPERTY } from "./createFieldSchema";
import { RTFSupportedZodTypes } from "./supportedZodTypes";
export type UnwrappedRTFSupportedZodTypes = {
    type: RTFSupportedZodTypes;
    [HIDDEN_ID_PROPERTY]: string | null;
};
export declare function unwrap(type: RTFSupportedZodTypes): UnwrappedRTFSupportedZodTypes;
export declare function unwrapEffects(effects: RTFSupportedZodTypes): any;
export type UnwrapZodType<T extends RTFSupportedZodTypes> = T extends ZodOptional<any> ? T["_def"]["innerType"] extends ZodNullable<any> ? GenericizeLeafTypes<T["_def"]["innerType"]["_def"]["innerType"]> : GenericizeLeafTypes<T["_def"]["innerType"]> : T extends ZodNullable<any> ? T["_def"]["innerType"] extends ZodOptional<any> ? GenericizeLeafTypes<T["_def"]["innerType"]["_def"]["innerType"]> : GenericizeLeafTypes<T["_def"]["innerType"]> : GenericizeLeafTypes<T>;
export type GenericizeLeafTypes<T extends RTFSupportedZodTypes> = ArrayAsLengthAgnostic<EnumAsAnyEnum<T>>;
export type ArrayAsLengthAgnostic<T extends RTFSupportedZodTypes> = T extends ZodArray<any, any> ? ZodArray<T["element"]> : T;
export type EnumAsAnyEnum<T extends RTFSupportedZodTypes> = T extends ZodEnum<any> ? ZodEnum<any> : T;
